/*/SUMMARY OF THIS PROJECT/*/
The code provided is a C++ program for a simple Student Management System that supports adding, editing, deleting, grading, and displaying student records. The main components include:

Student Class: Holds information for each student, including an ID, name, grades, and methods to calculate the average grade and display student information.

StudentManagementSystem Class: Manages a list of Student objects and provides methods to:

Add, edit, and delete students.
Add grades to students.
Display all students, including checking if the list is empty and showing a message if so.
Main Menu: A command-line menu allows users to select actions like adding, editing, and displaying students. Additional success messages confirm actions like student addition, deletion, and grade assignment.

The code now includes checks for empty lists and debug messages, ensuring students display correctly when added. This allows for improved user feedback and smoother management of the student list.



#include <iostream>
#include <vector>
#include <string>
#include <algorithm>  

using namespace std;

class Student
{
private:
    int id;
    string name;
    vector<int> grades;

public:
    Student(int studentId, string studentName) : id(studentId), name(studentName) {}

    int getId() const { return id; }
    string getName() const { return name; }

    void addGrade(int grade) 
    {
        grades.push_back(grade);
    }

    void editGrade(int index, int grade) 
    {
        if (index >= 0 && index < grades.size()) 
        {
            grades[index] = grade;
        } else 
        {
            cout << "Invalid grade index.\n";
        }
    }

    void deleteGrade(int index) 
    {
        if (index >= 0 && index < grades.size()) 
        {
            grades.erase(grades.begin() + index);
        } else 
        {
            cout << "Invalid grade index.\n";
        }
    }

    double calculateAverage() const 
    {
        if (grades.empty()) return 0.0;
        int sum = 0;
        for (int grade : grades) sum += grade;
        return static_cast<double>(sum) / grades.size();
    }

    void displayInfo() const 
    {
        cout << "ID: " << id << ", Name: " << name << ", Average Grade: " << calculateAverage() << endl;
    }
};

class StudentManagementSystem 
{
private:
    vector<Student> students;

    Student* findStudentById(int id)
    {
        for (auto& student : students) 
        {
            if (student.getId() == id) return &student;
        }
        return nullptr;
    }

public:
    void addStudent(int id, const string& name) 
    {
        if (findStudentById(id) != nullptr) 
        {
            cout << "Student ID already exists.\n";
            return;
        }
        students.emplace_back(id, name);
        cout << "Student added successfully.\n";
    }

    void editStudent(int id, const string& name) 
    {
        Student* student = findStudentById(id);
        if (student) {
            *student = Student(id, name);  // Reassign the student object with the new data
            cout << "Student information updated.\n";
        } else {
            cout << "Student not found.\n";
        }
    }

    void deleteStudent(int id) 
    {
        auto it = remove_if(students.begin(), students.end(),
                            [id](const Student& student) { return student.getId() == id; });
        if (it != students.end()) 
        {
            students.erase(it, students.end());
            cout << "Student deleted successfully.\n";
        } else 
        {
            cout << "Student not found.\n";
        }
    }

    void addGrade(int id, int grade) 
    {
        Student* student = findStudentById(id);
        if (student)
        {
            student->addGrade(grade);
            cout << "Grade added successfully.\n";
        } else 
        {
            cout << "Student not found.\n";
        }
    }

    void displayAllStudents() const 
    {
        if (students.empty())
        {
            cout << "No students to display.\n";
        } else 
        {
            cout << "Student List:\n";
            for (const auto& student : students) 
            {
                student.displayInfo();
            }
        }
    }
};

int main() 
{
    StudentManagementSystem sms;
    int choice, id, grade;
    string name;

    while (true) 
    {
        cout << "\nStudent Management System\n";
        cout << "1. Add Student\n2. Edit Student\n3. Delete Student\n";
        cout << "4. Add Grade\n5. Display All Students\n6. Exit\n";
        cout << "Enter your choice: ";
        cin >> choice;

        switch (choice) 
        {
            case 1:
                cout << "Enter student ID: ";
                cin >> id;
                cout << "Enter student name: ";
                cin.ignore();
                getline(cin, name);
                sms.addStudent(id, name);
                break;

            case 2:
                cout << "Enter student ID to edit: ";
                cin >> id;
                cout << "Enter new student name: ";
                cin.ignore();
                getline(cin, name);
                sms.editStudent(id, name);
                break;

            case 3:
                cout << "Enter student ID to delete: ";
                cin >> id;
                sms.deleteStudent(id);
                break;

            case 4:
                cout << "Enter student ID to add grade: ";
                cin >> id;
                cout << "Enter grade: ";
                cin >> grade;
                sms.addGrade(id, grade);
                break;

            case 5:
                sms.displayAllStudents();
                break;

            case 6:
                cout << "Exiting the program.\n";
                return 0;

            default:
                cout << "Invalid choice. Please try again.\n";
        }
    }

    return 0;
}
